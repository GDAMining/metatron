import {Col, Row} from "react-bootstrap";
import Button from "@mui/material/Button";
import {useParams} from "react-router-dom";
import axios from "axios";
import {ButtonGroup} from "@material-ui/core";
import Autocomplete from "@mui/material/Autocomplete";
import TextField from '@mui/material/TextField';
import Breadcrumbs from "@mui/material/Breadcrumbs";
import Link from '@mui/material/Link';
import React, {useState, useEffect, useContext, createContext, useRef} from "react";
import Badge from 'react-bootstrap/Badge'
import Typography from '@mui/material/Typography';
import SaveIcon from '@mui/icons-material/Save';
import 'bootstrap/dist/css/bootstrap.min.css';
import CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';
const icon = <CheckBoxOutlineBlankIcon fontSize="small" />;
import '../Document/document.css'
import {CircularProgress} from "@mui/material";
import {AppContext} from "../../App";

import DocumentTable from "../Document/DocumentTable";
import Mention from "../Annotation/Mention";
import Association from "../Annotation/Association";

export default function Document(props){
    const { username,users,collectionslist,document_id,collection,mentions,startrange,endrange } = useContext(AppContext);

    const [DocumentID,SetDocumentID] = document_id
    const [Collection,SetCollection] = collection
    const [MentionsList,SetMentionsList] = mentions
    const [Start,SetStart] = startrange
    const [End,SetEnd] = endrange

    const [FirstSelected,SetFirstSelected] = useState(false)
    const [SecondSelected,SetSecondSelected] = useState(false)

    const [FirstWordSelection,SetFirstWordSelection] = useState(false)
    const [SecondWordSelection,SetSecondWordSelection] = useState(false)
    const [DocumentDesc,SetDocumentDesc] = useState(false)
    const [rows, setRows] = useState([])
    const [defaultColumnWidths,setdefaultColumnWidths] = useState([]);
    const [Username, SetUsername] = username
    const [CollectionsList,SetCollectionsList] = collectionslist
    const [LoadingTable,SetLoadingTable] = useState(false)
    const [CollectionName, SetCollectionName] = useState(false)
    const [LoadingDoc,SetLoadingDoc] = useState(true)
    const [MentionsToUpdate,SetMentionsToUpdate] = useState(false)
    const [SpanIndexToUpdate,SetSpanIndexToUpdate] = useState(false)
    const [SectionToUpdate,SetSectionIndexToUpdate] = useState(false)
    // offset delle parole selezionate
    // const [Start,SetStart] = useState(false)
    // const [End,SetEnd] = useState(false)
    const [StartContainer,SetStartContainer] = useState(false)
    const [TextSelected,SetTextSelected] = useState(false)
    const [UpdateMentions,SeUpdateMentions] = useState(false)
    const [MentionOnClick,SetMentionOnClick] = useState(false)
    const [CurrentDiv,SetCurrentDiv] = useState(false)
    const [ShowModalErrorMention,SetShowModalErrorMention] = useState(false)

    useEffect(()=>{
        console.log('doc_id eccomi')

        if(DocumentID){
            console.log('doc_id',DocumentID)

            console.log('doc_id',window.location.host)

            axios.get('http://127.0.0.1:8000/get_mentions').then(response=>{
                SetMentionsList(response.data['mentions'])
                console.log('mentions eccomi',response.data['mentions'])
                // SetMentionsToUpdate(response.data['mentions'])
                SeUpdateMentions(true)
            }).catch(error=>{
                console.log('error',error)
            })

            axios.get('http://127.0.0.1:8000/get_document_content',{params:{document_id:DocumentID}})
                .then(response=>{
                    console.log('response',response.data)
                    SetDocumentDesc(response.data)
                })
        }

    },[DocumentID])

    useEffect(()=>{
        if(DocumentDesc && MentionsList){
            SetLoadingDoc(false)
        }
    },[DocumentDesc,MentionsList])




    useEffect(()=>{
        if(UpdateMentions && !LoadingDoc){
            MentionsList.map((mention,index)=>{
                // HighlightText(mention)
                // // CreateSelection(mention)
                // AddSpans(index)
            })
            SeUpdateMentions(false)
        }
    },[UpdateMentions,LoadingDoc])


    function DeleteRange(){
        if (window.getSelection) {
            if (window.getSelection().empty) {  // Chrome
                window.getSelection().empty();
            } else if (window.getSelection().removeAllRanges) {  // Firefox
                window.getSelection().removeAllRanges();
            }
        } else if (document.selection) {  // IE?
            document.selection.empty();
        }

        SetStart(false)
        SetEnd(false)
        SetStartContainer(false)

        SetTextSelected(false)
        SetCurrentDiv(false)
    }

    function AddSpans(index){
        var text = ''
        SetMentionOnClick(false)
        if (window.getSelection) {

            // var element = document.createElement('span');
            // element.className = 'mention_'+index.toString()

            var sel = window.getSelection();
            if (sel.rangeCount) {
                var range = sel.getRangeAt(0)
                range = range.cloneRange();
                // range.surroundContents(element);
                sel.removeAllRanges();
                sel.addRange(range);
            }



        }

        DeleteRange()
    }

    function sortByProperty(){
        return function(a,b){
            if(a['start'] > b['start'])
                return 1;
            else if(a['start'] < b['start'])
                return -1;

            return 0;
        }
    }

    function FindNewRange(start,stop){
        var items_list = MentionsList.sort(sortByProperty())

        var to_ret_mention = {}
        items_list.map((mention,ind)=>{

            if(mention['stop'] <= stop) {
                to_ret_mention = mention
            }
        })
        return [to_ret_mention['stop']+start,to_ret_mention['stop']+stop]
        // items_list.map((mention,ind)=>{
        //     if(mention['stop'] <= stop) {
        //         to_ret_mention = mention
        //     }
        //
        // )}
        // return [start+to_ret_mention['start'],start+to_ret_mention['stop']]
    }

    function AddMention(){
        if (window.getSelection) {
            var s = window.getSelection();
            var cur_start = 0
            var cur_stop = 0
            var cur_len = 0
            var range = s.getRangeAt(0);
            var node = s.anchorNode;
            var start = range.startOffset
            console.log('start',start)
            cur_len = start
            var stop = range.endOffset
            var testo = range.toString()
            var position = range.commonAncestorContainer.parentElement
            var position_span_index = position.id.split('_')
            position_span_index = position_span_index[position_span_index.length - 1]
            // position = position.parentElement.id
            console.log('pos',position)

            if (position.tagName === 'DIV'){

                position = position.parentElement.id
                console.log('pos',position)

            }
            else{
                position = position.id
            }
            var elem_anc = document.getElementById(position)

            var anc_children = elem_anc.children
            console.log('children',anc_children)

            console.log('children',position_span_index)
            if( anc_children.length > 1){
                // for(let index = 0; index < position_span_index; ++index){
                //     console.log('lung1',anc_children[index].innerText.length)
                //     cur_len += anc_children[index].innerText.length
                // }
                for(let index = 0; index < position_span_index; ++index){
                    var children = Array.from(anc_children[index].children)
                    console.log('children',children)
                    if (children.length > 1){
                        for(let j = 0; j < children.length; ++j){
                            if (children[j].className !== 'concepts'){
                                cur_len += children[j].innerText.length
                                console.log('children',children)

                                console.log('first',children[j].innerText.length, children[j].innerText)
                                console.log('first',cur_start,cur_len)
                            }


                        }
                    }else{
                        cur_len += anc_children[index].innerText.length
                    }


                }
                cur_start = cur_len
                cur_stop = cur_len + testo.length
            }
            else{
                cur_start = start
                cur_stop = stop
            }


            console.log('resume',cur_start,cur_stop,testo)
            console.log('node',node)
            console.log('range',range)
            console.log('range_sib',elem_anc)
            console.log('anc',position)

            // qua capisco il nuovo start e stop perchÃ© quello qua identificato si riferisce al primo span ma non all'inizio
            // var new_val = FindNewRange(start,stop)
            // console.log('new',new_val[0],new_val[1],elem_anc.substring(new_val[0],new_val[1]))

            var new_mention = {'start':cur_start,'stop':cur_stop,'mention_text':testo,'position':position}
            console.log('newment',new_mention)
            axios.post('http://127.0.0.1:8000/add_mentions',{start:cur_start,stop:cur_stop,position:position,mention_text: range.toString()})
                .then(response=>{
                    SetMentionsList([...MentionsList,new_mention])
                    SetDocumentDesc(response.data)
                }).catch(error=>{
                    console.log('error in adding mention',error)
            })
            // DeleteRange()
        }
    }

    function AddMentionSelected(){
        // aggiungo tra i due span selected
        DeleteRange()
        console.log('f',FirstSelected)
        console.log('s',SecondSelected)

        var span_number_first = FirstSelected['container'].split('_')[FirstSelected['container'].split('_').length-1]
        var span_number_second = SecondSelected['container'].split('_')[SecondSelected['container'].split('_').length - 1]
        if(FirstSelected['container'] === SecondSelected['container']){
            var first_word = FirstSelected['start'] < SecondSelected['start'] ? FirstSelected : SecondSelected
            var second_word = first_word === FirstSelected ? SecondSelected : FirstSelected
        }
        else{

            var first_word = span_number_first < span_number_second ? FirstSelected : SecondSelected
            var second_word = first_word === FirstSelected ? SecondSelected : FirstSelected

        }
        console.log('firstword',span_number_first,first_word)
        console.log('sectword',span_number_second,second_word)
        var cur_start = first_word['start']
        var cur_stop = second_word['stop']
        var cur_len = cur_start
        console.log('first',cur_start)
        var first_span_index = span_number_first
        var second_span_index = span_number_second
        var position = document.getElementById(first_word['container']).parentElement
        console.log('pos',position)

        if (position.tagName === 'DIV'){

            position = position.parentElement.id
            console.log('pos',position)

        }
        else{
            position = position.id
        }
        var elem_anc = document.getElementById(position)
        console.log('children',position)
        console.log('children',elem_anc)
        console.log('children',elem_anc.children)

        var anc_children = Array.from(elem_anc.children)

        // var anc_children_no_concepts = []
        // anc_children.map((o,i)=>{
        //     var children = []
        //     Array.from(o.children).map((d,e)=>{
        //         if(d.className === 'concepts'){
        //             d.remove()
        //         }
        //     })
        // })

        if( anc_children.length > 1){
            for(let index = 0; index < first_span_index; ++index){
                var children = Array.from(anc_children[index].children)
                console.log('children',children)
                if (children.length > 1){
                    for(let j = 0; j < children.length; ++j){
                        if (children[j].className !== 'concepts'){
                            cur_len += children[j].innerText.length
                            console.log('children',children)

                            console.log('first',children[j].innerText.length, children[j].innerText)
                            console.log('first',cur_start,cur_len)
                        }


                    }
                }else{
                cur_len += anc_children[index].innerText.length
                }


            }
            cur_start = cur_len
        }
        console.log('start',cur_start)

        // var position = document.getElementById(second_word['container']).parentElement.id
        // var elem_anc = document.getElementById(position)
        var testo = second_word['text']
        var cur_len = second_word['start']
        if( anc_children.length > 1){
            for(let index = 0; index < second_span_index; ++index){
                var children = Array.from(anc_children[index].children)
                if (children.length > 0){
                    console.log('children',children)
                    for(let j = 0; j < children.length; ++j){
                        if (children[j].className !== 'concepts'){
                            cur_len += children[j].innerText.length
                            console.log('first',children[j].innerText.length, children[j].innerText)
                            console.log('first',cur_start,cur_len)
                        }


                    }
                }else{
                    cur_len += anc_children[index].innerText.length
                }


                // console.log('second', anc_children[index].innerText.length, anc_children[index].innerText)
                //
                // cur_len += anc_children[index].innerText.length
            }
           cur_stop = cur_len + testo.length
        }
        console.log('stop',cur_stop)
        console.log(elem_anc.innerText)
        testo = elem_anc.innerText.substring(cur_start,cur_stop)
        console.log('testo',testo)

        // var selected_spans = Array.from(document.getElementsByClassName('selected'))
        // var start_span = selected_spans[0].id < selected_spans[1].id ? selected_spans[0] : selected_spans[1]
        // var end_span = selected_spans[0].id > selected_spans[1].id ? selected_spans[0] : selected_spans[1]
        //
        // // idnividuo span genitori
        // var parent_first_span = start_span.parentElement.id
        // var position = start_span.parentElement.parentElement.id
        //
        // var position_span_index = parent_first_span.split('_')
        // position_span_index = position_span_index[position_span_index.length - 1]
        // var cur_start = start_span.id
        // var cur_len = parseInt(cur_start)
        // var elem_anc = document.getElementById(position)
        // var anc_children = elem_anc.children
        // console.log('chiÃ²dren',anc_children)
        // console.log('chiÃ²dren',position_span_index)
        // if( anc_children.length > 1){
        //     for(let index = 0; index < position_span_index; ++index){
        //         console.log('lung1',anc_children[index].innerText.length)
        //         cur_len += anc_children[index].innerText.length
        //     }
        //     cur_start = cur_len
        // }
        // console.log('start',cur_start)
        //
        //
        //
        // var parent_second_span = end_span.parentElement.id
        // var testo = end_span.innerText
        // console.log('test sec',testo)
        // var position = end_span.parentElement.parentElement.id
        //
        // var position_span_index = parent_second_span.split('_')
        // position_span_index = position_span_index[position_span_index.length - 1]
        // var cur_stop = parseInt(end_span.id) + parseInt(testo.length)
        // var cur_len = parseInt(cur_stop)
        // var elem_anc = document.getElementById(position)
        // var anc_children = elem_anc.children
        // console.log('children',anc_children)
        // console.log('children',position_span_index)
        // if( anc_children.length > 1){
        //     for(let index = 0; index < position_span_index; ++index){
        //         console.log('lung1',anc_children[index].innerText.length)
        //         cur_len += anc_children[index].innerText.length
        //     }
        //     cur_stop += cur_len
        // }
        // else{
        //     cur_stop = cur_len
        // }
        // testo = elem_anc.innerText.substring(cur_start,cur_stop)
        // console.log('stop',cur_stop)


        // individuo testo tra genitore e selection


        // per cercare lo start devo prima sommare la lunghezza di tutti i fratelli del padre


            // qua capisco il nuovo start e stop perchÃ© quello qua identificato si riferisce al primo span ma non all'inizio
            // var new_val = FindNewRange(start,stop)
            // console.log('new',new_val[0],new_val[1],elem_anc.substring(new_val[0],new_val[1]))

        var new_mention = {'start':cur_start,'stop':cur_stop,'mention_text':testo,'position':position}
        console.log('newment',new_mention)
        axios.post('http://127.0.0.1:8000/add_mentions',{start:cur_start,stop:cur_stop,position:position,mention_text: testo})
            .then(response=>{
                SetMentionsList([...MentionsList,new_mention])
                SetDocumentDesc(response.data)
            }).catch(error=>{
            console.log('error in adding mention',error)
        })

    }



    function ClickOutsideWord(e){
        e.preventDefault()
        // console.log('clickoustide')
        var target = e.target
        console.log('target',target.tagName)
        console.log('target',target.className)
        if(target.tagName === 'DIV' && target.className !== 'paper'){
            console.log('entro qua')
            DeleteRange()
        }

    }

    function ClickOnWord(e){

        e.preventDefault()
        var s = window.getSelection();

        var range = s.getRangeAt(0);

        var node = s.anchorNode;

        console.log('node',node)
        SetCurrentDiv(node.parentElement.id)

        // console.log('s',s)
        console.log('currentid',node.parentElement.id)
        console.log('parent',node.parentElement.id)
        console.log('RANGE',range.startOffset, range.endOffset)
        // console.log('ancestor',range.commonAncestorContainer.tagName)
        // console.log('curr',node.id)
        var double_click = false
        // SetMentionOnClick(true)

        // try{
        if(range.commonAncestorContainer.tagName === 'DIV'){
            console.log('errore DIV!!!!')
            DeleteRange()
        }else
        {
            if(CurrentDiv === node.parentElement.id || !CurrentDiv) {
                if (range.startOffset === range.endOffset) { // GESTISCO IL CASO DEL SINGOLO CLICK
                    if (Start !== false && Start < range.startOffset) {
                        // console.log('entro')
                        range.setStart(node, Start);
                        double_click = true
                    } else {
                        try {
                            while (!range.toString().startsWith(' ')) {
                                range.setStart(node, (range.startOffset - 1));
                            }
                            if (range.toString().startsWith(' ')) {
                                range.setStart(node, range.startOffset + 1);
                            }
                        } catch {
                            range.setStart(node, range.startOffset);
                        }
                    }

                    console.log('start', range.startOffset, range.toString())
                    if (End !== false && End > range.endOffset) {
                        // console.log('entro')
                        range.setEnd(node, End);
                        double_click = true
                    } else {
                        try {
                            while (!range.toString().endsWith(' ')) {
                                range.setEnd(node, (range.endOffset + 1));

                            }
                            if (range.toString().endsWith(' ')) {
                                range.setEnd(node, range.endOffset - 1);
                            } else {
                                range.setEnd(node, range.endOffset);
                            }

                        } catch {
                            range.setEnd(node, range.endOffset);
                        }
                        console.log('end', range.endOffset)
                        SetEnd(range.endOffset)
                        SetStart(range.startOffset)
                        SetStartContainer(range.startContainer.parentNode.id)
                        console.log('node id',range.startContainer.parentNode.id)
                        SetTextSelected(range.toString())
                        // SetMentionOnClick(true)
                        // alert(range.toString())
                        // range = range.toString().trim()
                        // SetTextSelected(range.toString())
                    }
                    if (double_click) {
                        AddMention()
                        DeleteRange()
                        // AddSpans(MentionsList.length)
                    }


                } else {
                    console.log('MENTION CONTINUA')
                    // SetMentionOnClick(false)
                    SetStart(range.startOffset)
                    SetEnd(range.endOffset)
                    SetTextSelected(range.toString())
                    // alert(range.toString())
                    AddMention()
                    DeleteRange()
                    // AddSpans(MentionsList.length)
                }
            }
            else if(CurrentDiv && CurrentDiv.split('_')[0] === node.parentElement.id.split('_')[0]){
                console.log('ECCOMI QUA')
                range = s.getRangeAt(0);
                console.log('rt',range.toString())
                // console.log('conta',range.startContainer.parentNode)
                console.log('finale',range.toString(),TextSelected,StartContainer,range.startContainer.parentNode.id)
            }else{
                console.log('PARENT DIVERSO')
                DeleteRange()
                // throw 'Error, different nodes';
            }
        }

        // DeleteRange()
        // console.log('selection',Selection)

        // }catch{
        //     console.log('catch errore!!!!')
        //     DeleteRange()
        // }

    }


    useEffect(()=>{
        if (FirstSelected && SecondSelected) {
            AddMentionSelected()
            DeleteRange()
            SetFirstSelected(false)
            SetSecondSelected(false)
            // AddSpans(MentionsList.length)
        }

    },[FirstSelected,SecondSelected])

    function ClickOnWord_Test1(e){

        e.preventDefault()
        var s = window.getSelection();

        var range = s.getRangeAt(0);

        var node = s.anchorNode;

        console.log('node',node)
        SetCurrentDiv(node.parentElement.id)

        // console.log('s',s)
        console.log('currentid',node.parentElement.id)
        console.log('parent',node.parentElement.id)
        console.log('RANGE',range.startOffset, range.endOffset)

        // console.log('ancestor',range.commonAncestorContainer.tagName)
        // console.log('curr',node.id)
        var double_click = false
        // SetMentionOnClick(true)

        // try{
        if(range.commonAncestorContainer.tagName === 'DIV'){
            console.log('errore DIV!!!!')
            DeleteRange()
        }else
        {
            if(CurrentDiv === node.parentElement.id || !CurrentDiv || (CurrentDiv && CurrentDiv.split('_')[0] === node.parentElement.id.split('_')[0])) {
                if (range.startOffset === range.endOffset) { // GESTISCO IL CASO DEL SINGOLO CLICK
                    // if (Start !== false && Start < range.startOffset) {
                    //     // console.log('entro')
                    //     range.setStart(node, Start);
                    //     double_click = true
                    // } else {
                        try {
                            while (!range.toString().startsWith(' ')) {
                                range.setStart(node, (range.startOffset - 1));
                            }
                            if (range.toString().startsWith(' ')) {
                                range.setStart(node, range.startOffset + 1);
                            }
                        } catch {
                            range.setStart(node, range.startOffset);
                        }
                    // }

                        console.log('start', range.startOffset, range.toString())
                    // if (End !== false && End > range.endOffset) {
                    //     // console.log('entro')
                    //     range.setEnd(node, End);
                    //     double_click = true
                    // } else {
                        try {
                            while (!range.toString().endsWith(' ')) {
                                range.setEnd(node, (range.endOffset + 1));

                            }
                            if (range.toString().endsWith(' ')) {
                                range.setEnd(node, range.endOffset - 1);
                            } else {
                                range.setEnd(node, range.endOffset);
                            }

                        } catch {
                            range.setEnd(node, range.endOffset);
                        }
                        console.log('end', range.endOffset)
                        SetEnd(range.endOffset)
                        SetStart(range.startOffset)
                        SetStartContainer(range.startContainer.parentNode.id)
                        console.log('node id',range.startContainer.parentNode.id)
                        SetTextSelected(range.toString())
                        var firstsel = {}
                        firstsel['container'] = range.startContainer.parentNode.id
                        firstsel['start'] = range.startOffset
                        firstsel['stop'] = range.endOffset
                        firstsel['text'] = range.toString()
                        if (!FirstSelected){
                            SetFirstSelected(firstsel)

                        }
                        else{
                            SetSecondSelected(firstsel)
                        }
                        // var element = document.createElement('span');
                        // element.className = 'selected'
                        // element.id = range.startOffset
                        // // trovo start rispetto a parent + esterno!!
                        // var parent_full = range.startContainer.parentNode.parentElement
                        //
                        // var sel = window.getSelection();
                        // if (sel.rangeCount) {
                        //     var range = sel.getRangeAt(0)
                        //     range = range.cloneRange();
                        //     range.surroundContents(element);
                        //     sel.removeAllRanges();
                        //     sel.addRange(range);
                        // }
                        // DeleteRange()
                        // SetMentionOnClick(true)
                        // alert(range.toString())
                        // range = range.toString().trim()
                        // SetTextSelected(range.toString())
                    // }
                    // var selected_elems = Array.from(document.getElementsByClassName('selected'))
                    // if (FirstSelected && SecondSelected) {
                    //     AddMentionSelected()
                    //     DeleteRange()
                    //     // AddSpans(MentionsList.length)
                    // }


                } else {
                    console.log('MENTION CONTINUA')
                    // SetMentionOnClick(false)
                    SetStart(range.startOffset)
                    SetEnd(range.endOffset)
                    SetTextSelected(range.toString())
                    // alert(range.toString())
                    AddMention()
                    DeleteRange()
                    // AddSpans(MentionsList.length)
                }
            }
            else if(CurrentDiv && CurrentDiv.split('_')[0] === node.parentElement.id.split('_')[0]){
                console.log('ECCOMI QUA')
                range = s.getRangeAt(0);
                console.log('rt',range.toString())
                // console.log('conta',range.startContainer.parentNode)
                console.log('finale',range.toString(),TextSelected,StartContainer,range.startContainer.parentNode.id)
            }else{
                console.log('PARENT DIVERSO')
                DeleteRange()
                // throw 'Error, different nodes';
            }
        }

        // DeleteRange()
        // console.log('selection',Selection)

        // }catch{
        //     console.log('catch errore!!!!')
        //     DeleteRange()
        // }

    }


    function HighlightText(mention) {
        console.log('mention',mention)
        var node = document.getElementById(mention['position'])
        console.log('mention',node)

        console.log('nodo',node.firstChild)
        var range = document.createRange();
        range.setStart(node.firstChild,mention['start']);
        range.setEnd(node.firstChild,mention['stop']);
        // console.log('r',range.toString())
        var sel = window.getSelection();
        sel.addRange(range)


    }












    useEffect(()=>{
        console.log('nodo',document.getElementById('abstract_value'))
    },[LoadingDoc])

    return(
        <div>
            {(LoadingDoc || !MentionsList )? <div className='loading'>
                <CircularProgress />
            </div> : <div className='paper_doc' onClick={ClickOutsideWord}>
                {Object.keys(DocumentDesc).map((mention_key,i)=><>

                    {mention_key === 'title_value' ? <><h3 className='tab' id='title_value' onClick={ClickOnWord_Test1}>
                            {DocumentDesc[mention_key].map((obj,i)=><>
                                {obj['type'].startsWith('no_') ? <span id = {mention_key+'_'+i.toString()}>{obj['text']}</span> : <div style={{display:'inline-block'}}><Association id = {mention_key+'_'+i.toString()} class = {obj['mentions']} loc = {mention_key} mention_text = {obj['text']}  /></div>}
                            </>)}</h3>

                        </> :
                        <>
                            {mention_key.endsWith('_key') && mention_key !== 'title_key' && <div className='tab'>
                                <b id={mention_key}  onClick={ClickOnWord_Test1}>
                                    {DocumentDesc[mention_key].map((obj,i)=><>{
                                        mention_key.endsWith('_key') && <>

                                            {obj['type'].startsWith('no_') ? <span id = {mention_key+'_'+i.toString()}>{obj['text']}</span> : <div style={{display:'inline-block'}}><Association id = {mention_key+'_'+i.toString()} loc = {mention_key} class = {obj['mentions']} mention_text = {obj['text']}  /></div>}

                                        </>

                                    }
                                    </>)}
                                </b>
                            </div>}
                            {mention_key.endsWith('_value') && mention_key !== 'title_value'&& <div className='tab tab_value'>
                                    <span id={mention_key}  onClick={ClickOnWord_Test1}>
                                        {DocumentDesc[mention_key].map((obj,i)=><>
                                            {
                                                mention_key.endsWith('_value') && <>

                                                    {obj['type'].startsWith('no_') ? <span id = {mention_key+'_'+i.toString()}>{obj['text']}</span> : <div style={{display:'inline-block'}}><Association id = {mention_key+'_'+i.toString()} loc = {mention_key} class = {obj['mentions']} mention_text = {obj['text']}  /></div>}

                                                </>

                                            }</>)}

                                    </span>
                            </div>}
                        </>}
                </>)}
                {/*{Object.keys(DocumentDesc).map((mention_key,i)=><>*/}

                {/*{mention_key === 'title_value' ? <><h3 className='tab' id='title_value' onClick={ClickOnWord_Test1}>*/}
                {/*        {Object.keys(DocumentDesc[mention_key]).map((k,i)=><>*/}
                {/*            {k.startsWith('no_') ? <span id = {mention_key+'_'+i.toString()}>{DocumentDesc[mention_key][k]}</span> : <Mention id = {mention_key+'_'+i.toString()} class = {DocumentDesc[mention_key][k]['mentions']} loc = {mention_key} mention_text = {DocumentDesc[mention_key][k]['text']}  />}*/}
                {/*        </>)}</h3>*/}

                {/*    </> :*/}
                {/*    <>*/}
                {/*        {mention_key.endsWith('_key') && mention_key !== 'title_key' && <div className='tab'>*/}
                {/*            <b id={mention_key}  onClick={ClickOnWord_Test1}>*/}
                {/*                {Object.keys(DocumentDesc[mention_key]).map((k,i)=><>{*/}
                {/*                    mention_key.endsWith('_key') && <>*/}

                {/*                        {k.startsWith('no_') ? <span id = {mention_key+'_'+i.toString()}>{DocumentDesc[mention_key][k]}</span> : <Mention id = {mention_key+'_'+i.toString()} loc = {mention_key} class = {DocumentDesc[mention_key][k]['mentions']} mention_text = {DocumentDesc[mention_key][k]['text']}  />}*/}

                {/*                    </>*/}

                {/*                }*/}
                {/*                </>)}*/}
                {/*            </b>*/}
                {/*        </div>}*/}
                {/*        {mention_key.endsWith('_value') && mention_key !== 'title_value'&& <div className='tab tab_value'>*/}
                {/*                    <span id={mention_key}  onClick={ClickOnWord_Test1}>*/}
                {/*                        {Object.keys(DocumentDesc[mention_key]).map((k,i)=><>*/}
                {/*                            {*/}
                {/*                                mention_key.endsWith('_value') && <>*/}

                {/*                                    {k.startsWith('no_') ? <span id = {mention_key+'_'+i.toString()}>{DocumentDesc[mention_key][k]}</span> :<Mention id = {mention_key+'_'+i.toString()} loc = {mention_key} class = {DocumentDesc[mention_key][k]['mentions']} mention_text = {DocumentDesc[mention_key][k]['text']}  />}*/}

                {/*                                </>*/}

                {/*                            }</>)}*/}

                {/*                    </span>*/}
                {/*        </div>}*/}
                {/*    </>}*/}
                {/*</>)}*/}

                {/*{Object.keys(DocumentDesc).map((k,i)=>*/}
                {/*    <div >*/}
                {/*        {k === 'title' ? <><h3 className='tab' id='title_value' onClick={ClickOnWord}>{DocumentDesc[k]}</h3>*/}

                {/*        </> :*/}
                {/*            <>*/}
                {/*                <div className='tab'>*/}
                {/*                    <b id={k.toString()+'_key'}  onClick={ClickOnWord}>{k}</b>*/}
                {/*                </div>*/}
                {/*                <div className='tab tab_value'>*/}
                {/*                    <span id={k.toString()+'_value'}  onClick={ClickOnWord}>{DocumentDesc[k]}</span>*/}
                {/*                </div>*/}
                {/*            </>}*/}
                {/*    </div>*/}


                {/*)}*/}
            </div> }


        </div>

    );
}



